{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8840\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\qc\partightenfactor0

\f0\fs36 \cf0 Reflection-2\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\

\fs24 1.The price1 and price3 is a float while price2 and price4 is a double. Floats have limited precision than the double, so some numbers can show errors during the rounding. That\'92s maybe why price1 does not represent the intended value.\
\
2. In the first example we divide money which is an integer using 100.0 which is a float. Here C implicitly promotes the integer to double. This is called implicit conversion.\
    In the second example, we explicitly casted the integer 100 before dividing it with money. Which implicitly promotes the money into a double.\
    In the last example, the integer money is explicitly converted to a double before division.\
\
3. \
    a) The values are 0.00 and 72. It is because in sample1 and sample2 we used double format specifier which makes it an error of giving 0.00. While in sample2 and sample4 we used integer format specifier which gave the value 72.\
    b) sample1-$0.00\
	sample2-$72\
	sample3-$0.00\
	sample4-$72\
     c)In the sample 1 and 3 the result is not the intended one because the result was implicitly coerced into a double.}